upstream {{seaside_app_name}} {
{% for srv in servers_and_ports %}
   {% if srv.name=="{{seaside_app_name}}" %}
      server {{srv.host}}:{{srv.port}};
   {% endif %}
{% endfor %}
}

{% for srv in servers_and_ports %}
   {% if srv.name=="{{seaside_app_name}}" %}
upstream sticky{{srv.port}} {
      server {{srv.host}}:{{srv.port}};
}
   {% endif %}
{% endfor %}

map $cookie_backend $sticky_backend {
    default {{seaside_app_name}};
    "1" sticky9004;
    "2" sticky9005;
    "3" sticky9006;
}

upstream {{seaside_app_name}}AncillaryServicesServer {
# I run a gem with zinc to handle api things and also do scheduled tasks etc
{% for srv in servers_and_ports %}
   {% if srv.name=='{{seaside_app_name}}AncillaryServicesServer' %}
      server {{srv.host}}:{{srv.port}};
   {% endif %}
{% endfor %}
   keepalive 10;
}
server {
       listen [::]:80;
       listen 80;
       server_name {{domain}}  {{ inventory_hostname }};
       include sites-available/blockBots;
       add_header X-Frame-Options DENY;
       
       #this is for the letsencrypt verification process
       location ~ /.well-known {
                allow all;
        }

        #this redirects everyone to the https site
       location / {
              return 301  https://{{domain}}$request_uri;
       }             


}

server {
    
        listen [::]:443 ssl {{ spdy_or_http2 }} deferred ;
        listen 443  ssl {{ spdy_or_http2 }}  deferred;
       server_name {{domain}} {{ inventory_hostname }};
       root /var/www/{{domain}};

       #see nginx.conf for ssl config   
       ssl_certificate /etc/letsencrypt/live/{{domain}}/fullchain.pem;    
       ssl_certificate_key /etc/letsencrypt/live/{{domain}}/privkey.pem;
       ssl_trusted_certificate /etc/letsencrypt/live/{{domain}}/fullchain.pem;
       ssl_dhparam  /etc/pki/private/cert/{{domain}}.dhparam.pem;     

       add_header X-Frame-Options DENY;
       add_header Strict-Transport-Security max-age=31536000;       
       
       keepalive_requests 1000;
       keepalive_timeout 100;

       include sites-available/blockBots;

       fastcgi_cache off;


	location @seasideApp {


	   fastcgi_param HTTP_X_IP $remote_addr;
           fastcgi_param HTTP_X_CCODE $geoip_city_country_code;
           fastcgi_param HTTP_X_CNAME $geoip_city_country_name;
           fastcgi_param HTTP_X_REGION $geoip_region;
           fastcgi_param HTTP_X_REGION_NAME $geoip_region_name;
           fastcgi_param HTTP_X_CITY $geoip_city;
           fastcgi_param HTTP_X_AREA_CODE $geoip_area_code;
           fastcgi_param HTTP_X_LATITUDE $geoip_latitude;
           fastcgi_param HTTP_X_LONGITUDE $geoip_longitude;
           fastcgi_param HTTP_X_POSTAL_CODE $geoip_postal_code;
	   fastcgi_param SSL_SESSION_ID $ssl_session_id;
           include fastcgi_params;
           fastcgi_pass {{seaside_app_name}};
	   
           # enable the below after configuring Seaside to set a cookie with the key 'backend' and the value set to 1,2, or 3 randomly to always send the same session to the same gem 
           #fastcgi_pass $sticky_backend;
        }

        location / {
                try_files $uri  @seasideApp;
        }
        location /protected_files {
                internal;
                alias /var/www/{{domain}}/protected;
        }

# use this part if you have a separate api endpoint 
        #        location /api/v1 {
#                     proxy_pass @{{seaside_app_name}}AncillaryServicesServer;
   #     }


	location = /favicon.ico {
                log_not_found off;
        	expires max;
	        access_log off;
        }

        set $cors "";

         if ($http_origin ~* (\.{{domain}})) {
                set $cors "true";
         }

        location ~* ^.+\.(css|js|jpg|jpeg|gif|png|ico|svg|woff|ttf|eot|mp4|swf|woff2|htc)$ {

                if ($cors = "true") {
                   add_header Access-Control-Allow-Origin "$http_origin" ;
                }

                expires max;
                add_header Cache-Control "public, must-revalidate, proxy-revalidate";
                add_header Pragma public;
        }

}
